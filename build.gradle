import com.sun.org.apache.xalan.internal.xsltc.cmdline.Compile

buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'net.saliman:gradle-cobertura-plugin:2.2.2'
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.4.0'
	}
}

apply plugin: 'idea'
apply plugin: 'cobertura'
apply plugin: 'coveralls'

allprojects {
	apply plugin: 'idea'
	apply plugin: 'java'
	apply plugin: 'cobertura'
	apply plugin: 'coveralls'

	group = "org.stagemonitor"

	repositories {
		mavenCentral()
		maven { url "http://repo.spring.io/libs-snapshot" }
	}

	dependencies {
		testCompile 'junit:junit:4.11'
		testCompile 'org.mockito:mockito-all:1.9.5'
	}

	test.testLogging.exceptionFormat = 'full'

	compileJava {
		sourceCompatibility = 1.6
		targetCompatibility = 1.6
		options.debug = true
		options.debugOptions.debugLevel = "source,lines,vars"
	}

	tasks.withType(Compile) {
		options.encoding = 'UTF-8'
	}

	cobertura {
		coverageFormats = ['html', 'xml']
	}

	if (!project.name.equals("stagemonitor-benchmark")) {
		apply plugin: 'maven-publish'

		task sourcesJar(type: Jar, dependsOn: classes) {
			classifier = 'sources'
			from sourceSets.main.allSource
		}
		artifacts {
			archives sourcesJar
		}
		publishing {
			publications {
				maven(MavenPublication) {
					from components.java

					artifact sourcesJar {
						classifier "sources"
					}
				}
			}
			repositories {
				maven {
					url System.getenv('MVN_REPO')
				}
			}
		}
	}

}

cobertura {
	coverageMergeDatafiles =  rootProject.subprojects.collect {
		file("${it.buildDir.path}/cobertura/cobertura.ser")
	}.findAll {!it.toString().contains("stagemonitor-benchmark")}
	coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report
//	rootProject.subprojects.each {
//		coverageDirs << file("${it.name}/build/classes/main")
//	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "1.11"
}
