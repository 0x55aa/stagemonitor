/*
 * RELEASING A NEW VERSION
 *  - 'gradle release'. This is what will happen:
 *    - all tests are executed locally
 *    - you will be asked for the version number of the release and the next development (SNAPSHOT) version
 *    - the gradle release plugin will then tag and push the release to github
 *  - checkout the release tag e.g. 'git checkout 0.11.0'
 *  - execute 'gradle uploadArchives -PnexusUsername=<username> -PnexusPassword=<pwd> -Psigning.secretKeyRingFile=<file> -Psigning.password=<passphrase>'
 *  - Release the deployment at https://oss.sonatype.org/#welcome
 *    more information is available under http://central.sonatype.org/pages/releasing-the-deployment.html
 *
 */

buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}

	dependencies {
		classpath 'net.saliman:gradle-cobertura-plugin:2.2.4'
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.0'
		classpath 'com.github.townsfolk:gradle-release:1.2'
		classpath 'com.bmuschko:gradle-nexus-plugin:2.0'
	}
}

repositories {
	mavenCentral()
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'release'
apply plugin: 'cobertura'
apply plugin: 'com.github.kt3k.coveralls'

ext {
	metricsVersion = '3.1.1'
	slf4jVersion = '1.7.12'
	jacksonVersion = '2.5.2'
	esVersion = '1.5.1'
}

subprojects {
	configurations {
		provided
		compile.extendsFrom provided
	}
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'java'
	apply plugin: 'cobertura'

	group = "org.stagemonitor"

	repositories {
		mavenCentral()
	}

	dependencies {
		testCompile 'junit:junit:4.12'
		testCompile 'org.mockito:mockito-all:1.10.19'
		testCompile 'ch.qos.logback:logback-classic:1.1.3'
	}

	test.testLogging.exceptionFormat = 'full'

	compileJava {
		sourceCompatibility = 1.6
		targetCompatibility = 1.6
		options.debug = true
		options.debugOptions.debugLevel = "source,lines,vars"
	}

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
		options.incremental = true
	}

	cobertura {
		coverageFormats = []
		coverageIgnoreTrivial = true
	}

	if (!project.name.contains("benchmark") && !project.name.contains("byte-buddy")) {
		apply from: "$rootDir/gradle/publish-maven.gradle"
	}

	javadoc {
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}

	task copyToLib( type: Copy ) {
		into "$buildDir/libs/lib"
		from configurations.runtime - configurations.provided
	}

	jar {
		manifest {
			attributes("Implementation-Version": version)
		}
	}
}

release {
	preTagCommitMessage = 'release '
	tagCommitMessage = 'release '
	newVersionCommitMessage = 'next development version '
	failOnSnapshotDependencies = false // snapshot for caliper is needed in benchmark
	requireBranch = null
	failOnCommitNeeded = false
}
release.dependsOn test

def getProjectsToTest() {
	subprojects.findAll { !(it.toString() =~ "benchmark|buddy") }
}

test.dependsOn << projectsToTest*.tasks*.withType(Test).flatten()

cobertura {
	coverageMergeDatafiles =  projectsToTest.collect { file("${it.buildDir.path}/cobertura/cobertura.ser") }
	coverageFormats = ['html', 'xml']
	coverageIgnoreTrivial = true
	coverageSourceDirs = [ projectsToTest.sourceSets.main.java.srcDirs.flatten() ]
}

task wrapper(type: Wrapper) {
	gradleVersion = "2.1"
}
