/*
 * To release a new version, all you have to do is execute 'gradle release'. This is what will happen:
 *  - all tests are executed locally
 *  - you will be asked for the version number of the release and the next development (SNAPSHOT) version
 *  - the gradle release plugin will then tag and push the release to github
 *  - travis builds and tests the version as always
 *  - if the build was successful, travis will additionally push the maven artifacts that are generated by the
 *    maven-publish plugin to the stagemonitor maven repo located at https://github.com/stagemonitor/mvn-repo
 *
 */

buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'net.saliman:gradle-cobertura-plugin:2.2.4'
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.0'
		classpath 'com.github.townsfolk:gradle-release:1.2'
	}
}

repositories {
	mavenCentral()
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'release'
apply plugin: 'cobertura'
apply plugin: 'com.github.kt3k.coveralls'

subprojects {
	configurations {
		compileNoLib
		compile.extendsFrom compileNoLib
		provided
		compile.extendsFrom provided
	}
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'java'
	apply plugin: 'cobertura'

	group = "org.stagemonitor"

	repositories {
		mavenCentral()
	}

	dependencies {
		testCompile 'junit:junit:4.11'
		testCompile 'org.mockito:mockito-all:1.9.5'
	}

	test.testLogging.exceptionFormat = 'full'

	compileJava {
		sourceCompatibility = 1.6
		targetCompatibility = 1.6
		options.debug = true
		options.debugOptions.debugLevel = "source,lines,vars"
	}

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
		options.incremental = true
	}

	cobertura {
		coverageFormats = []
		coverageIgnoreTrivial = true
	}

	if (!project.name =~ "benchmark|stagemonitor-os") {
		apply from: "$rootDir/gradle/publish-maven.gradle"
	}

	task copyToLib( type: Copy ) {
		into "$buildDir/libs/lib"
		from configurations.runtime - configurations.provided - configurations.compileNoLib
	}

	jar {
		manifest {
			attributes("Implementation-Version": version)
		}
	}
}

release {
	preTagCommitMessage = 'release '
	tagCommitMessage = 'release '
	newVersionCommitMessage = 'next development version '
	failOnSnapshotDependencies = false // snapshot for caliper is needed in benchmark
}
release.dependsOn test

def getProjectsToTest() {
	subprojects.findAll { !(it.toString() =~ "benchmark|starter") }
}

test.dependsOn << projectsToTest*.tasks*.withType(Test).flatten()

cobertura {
	coverageMergeDatafiles =  projectsToTest.collect { file("${it.buildDir.path}/cobertura/cobertura.ser") }
	coverageFormats = ['html', 'xml']
	coverageIgnoreTrivial = true
	coverageSourceDirs = [ projectsToTest.sourceSets.main.java.srcDirs.flatten() ]
}

task wrapper(type: Wrapper) {
	gradleVersion = "2.1"
}
